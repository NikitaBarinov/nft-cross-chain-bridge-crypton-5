/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MarketItemStruct = {
  itemId: BigNumberish;
  price: BigNumberish;
  nftContract: string;
  seller: string;
  owner: string;
  sold: boolean;
};

export type MarketItemStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  boolean
] & {
  itemId: BigNumber;
  price: BigNumber;
  nftContract: string;
  seller: string;
  owner: string;
  sold: boolean;
};

export interface NFTMarketInterface extends utils.Interface {
  functions: {
    "buyItem(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "createItem(address,string)": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "listItem(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createItem",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "ItemBought(address,uint256,uint256)": EventFragment;
    "ItemCreated(address,uint256)": EventFragment;
    "MarketItemCanceled(uint256)": EventFragment;
    "MarketItemCreated(address,address,address,uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ItemBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _newOwner: string; _itemId: BigNumber; _price: BigNumber }
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export type ItemCreatedEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; tokenId: BigNumber }
>;

export type ItemCreatedEventFilter = TypedEventFilter<ItemCreatedEvent>;

export type MarketItemCanceledEvent = TypedEvent<
  [BigNumber],
  { _itemId: BigNumber }
>;

export type MarketItemCanceledEventFilter =
  TypedEventFilter<MarketItemCanceledEvent>;

export type MarketItemCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, boolean],
  {
    nftContract: string;
    owner: string;
    seller: string;
    itemId: BigNumber;
    price: BigNumber;
    sold: boolean;
  }
>;

export type MarketItemCreatedEventFilter =
  TypedEventFilter<MarketItemCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface NFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createItem(
      _to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput[]]>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput]>;

    listItem(
      _itemId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createItem(
    _to: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput[]>;

  getItem(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput>;

  listItem(
    _itemId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancel(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createItem(
      _to: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput[]>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput>;

    listItem(
      _itemId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ItemBought(address,uint256,uint256)"(
      _newOwner?: null,
      _itemId?: null,
      _price?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      _newOwner?: null,
      _itemId?: null,
      _price?: null
    ): ItemBoughtEventFilter;

    "ItemCreated(address,uint256)"(
      owner?: string | null,
      tokenId?: null
    ): ItemCreatedEventFilter;
    ItemCreated(owner?: string | null, tokenId?: null): ItemCreatedEventFilter;

    "MarketItemCanceled(uint256)"(
      _itemId?: null
    ): MarketItemCanceledEventFilter;
    MarketItemCanceled(_itemId?: null): MarketItemCanceledEventFilter;

    "MarketItemCreated(address,address,address,uint256,uint256,bool)"(
      nftContract?: string | null,
      owner?: string | null,
      seller?: null,
      itemId?: BigNumberish | null,
      price?: null,
      sold?: null
    ): MarketItemCreatedEventFilter;
    MarketItemCreated(
      nftContract?: string | null,
      owner?: string | null,
      seller?: null,
      itemId?: BigNumberish | null,
      price?: null,
      sold?: null
    ): MarketItemCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createItem(
      _to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      _itemId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createItem(
      _to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      _itemId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
